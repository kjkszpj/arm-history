# Copyright (C) 2015 David Gao <davidgao1001@gmail.com>
#
# This program is free software; you can redistribute  it and/or modify it
# under  the terms of  the GNU General  Public License as published by the
# Free Software Foundation;  either version 2 of the  License, or (at your
# option) any later version.

# Makefile for ARMv7A-LE

######## BEGIN CONFIG ########
CROSS_COMPILE	=  arm-unknown-eabi-

MACH		=  zynq7000
BOARD		=  zedboard
########  END  CONFIG ########

ROOTDIR		=  $(shell pwd)
UPPERMACH	=  $(shell echo $(MACH) | tr a-z- A-Z_)

M4		=  m4
CC		=  $(CROSS_COMPILE)gcc
CPP		=  $(CROSS_COMPILE)cpp
LD		=  $(CROSS_COMPILE)ld
OBJDUMP		=  $(CROSS_COMPILE)objdump
OBJCOPY		=  $(CROSS_COMPILE)objcopy

INCFLAG		=  -I. -I./include -I./include/arch/$(ARCH)
INCFLAG		+= -I./include/arch/$(ARCH)/asm/mach-$(MACH)

CFLAGS		=  -Wall -fno-builtin -nostdinc -nostdlib -march=armv7-a
CFLAGS		+= -mlittle-endian $(INCFLAG) -DMACH_$(UPPERMACH)

LDFLAGS		=  -EL -O -N

DRIVERS_OBJS	=   drivers/clock/gtc-a9mpcore.o \
                    drivers/sd/sd-zynq7000.o \
                    drivers/serial/uart.o \
                    drivers/serial/uart-printf.o \
                    drivers/serial/uart-zynq7000.o \
                    drivers/misc/division-arm.o \
                    lib/libc/stdio/snprintf.o

EX_DIVE_OBJS    =   drivers/sd/use-sd-zynq7000.o

FIRMWARE_OBJS	=   firmware/arch/$(ARCH)/vector.o \
		            firmware/arch/$(ARCH)/bootasm.o \
		            firmware/arch/$(ARCH)/bootmain.o \
		            $(DRIVERS_OBJS)

FIRMWARE_M4	=   firmware/arch/$(ARCH)/firmware.m4 \
		        firmware/arch/$(ARCH)/$(MACH)/chip.m4 \
		        firmware/arch/$(ARCH)/$(MACH)/$(BOARD)/board.m4

MBR_OBJS	=   boot/arch/$(ARCH)/$(MACH)/bootmain.o

MMU_L_OBJS	=	kern/init/arch/$(ARCH)/$(MACH)/mmu_low.o

KINIT_OBJS	=	kern/init/init.o \
                kern/init/arch/$(ARCH)/$(MACH)/enter_kernel_space.o \
                kern/init/arch/$(ARCH)/$(MACH)/interrupt.o \
                kern/init/arch/$(ARCH)/$(MACH)/l1cache.o \
                kern/init/arch/$(ARCH)/$(MACH)/mmu_high.o \
                kern/init/arch/$(ARCH)/$(MACH)/scu.o \
                kern/sched/sched_init.o

INT_OBJS    =   kern/arch/$(ARCH)/$(MACH)/interrupt.o \
                kern/arch/$(ARCH)/$(MACH)/interrupt_vector.o \
                kern/syscall.o

SCHED_OBJS  =   kern/sched/sched_main.o \
				kern/sched/policy_rr.o

MM_OBJS 	=	kern/mm/kmemory_manage.o \
                kern/mm/mmap.o \
				kern/mm/pages_manage.o \
				kern/mm/slb.o \
				kern/arch/$(ARCH)/$(MACH)/pte.o

FS_OBJS		=	kern/fs/fs_manage.o

LIBC_OBJS   =   lib/libc/string/memcpy.o \
                lib/libc/string/memset.o

USER_OBJS   =   user/el.o \
                user/entry_program.o

TOTAL_KERNEL_OBJS	=  	mmu_low.elf $(DRIVERS_OBJS) $(EX_DIVE_OBJS) $(KINIT_OBJS) $(MM_OBJS) $(FS_OBJS) \
                        $(INT_OBJS) $(SCHED_OBJS) $(LIBC_OBJS)

all: firmware.bin mbr.bin kernel.elf user.elf

$(FIRMWARE_OBJS): EXTRA_CFLAGS = -O2

firmware.ld: $(FIRMWARE_M4)
	$(M4) firmware/arch/$(ARCH)/firmware.m4 \
	-I firmware/arch/$(ARCH)/$(MACH)/ \
	-I firmware/arch/$(ARCH)/$(MACH)/$(BOARD)/ > $@

firmware.elf: $(FIRMWARE_OBJS) firmware.ld
	$(LD) $(LDFLAGS) -T firmware.ld -o $@ $(FIRMWARE_OBJS)

$(MBR_OBJS): EXTRA_CFLAGS := -Os

mbr.elf: $(MBR_OBJS) boot/arch/$(ARCH)/$(MACH)/mbr.ld
	$(LD) $(LDFLAGS) -T boot/arch/$(ARCH)/$(MACH)/mbr.ld -o $@ $^

mmu_low.elf: $(MMU_L_OBJS) kern/init/arch/$(ARCH)/$(MACH)/mmu_low.ld
	$(LD) $(LDFLAGS) -T kern/init/arch/$(ARCH)/$(MACH)/mmu_low.ld -o $@ $^

kernel.elf: $(TOTAL_KERNEL_OBJS) kern/kernel.ld
	$(LD) $(LDFLAGS) -T kern/kernel.ld -o kernel.elf $(TOTAL_KERNEL_OBJS)

user.elf:   $(USER_OBJS) user/norm.ld
	$(LD) $(LDFLAGS) -T user/norm.ld -o user.elf $(USER_OBJS)

.S.o:
	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) -o $@ -c $<

.c.o:
	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) -o $@ -c $<

%.s: %.elf
	$(OBJDUMP) -S bin/$^ > $@

%.bin: %.elf
	$(OBJCOPY) -O binary -S $^ $@

.PHONY: clean




#------useful command below------
clean:
	rm -f firmware.ld
	rm -rf $(FIRMWARE_OBJS) firmware.elf firmware.bin firmware.s
	rm -rf $(MBR_OBJS) mbr.elf mbr.bin mbr.s
	rm -rf $(MMU_L_OBJS) mmu_low.elf mmu_low.bin mmu_low.s
	rm -rf $(KINIT_OBJS) kinit.elf kinit.bin kinit.s
	rm -rf $(TOTAL_KERNEL_OBJS) kernel.elf kernel.bin kernel.s
